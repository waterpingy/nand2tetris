/** A simple snake that grows and moves on a grid.            */
/** dir: 0=up, 1=right, 2=down, 3=left                        */
class Snake {

    field Array xPos;      // x coordinates of body segments
    field Array yPos;      // y coordinates of body segments
    field int   length;    // current length (≥1)
    field int   dir;       // current direction

    /** Constructs a snake of length 1 at (20,10) heading right. */
    constructor Snake new () {
        let xPos    = Array.new(200);   // max 200 segments
        let yPos    = Array.new(200);
        let xPos[0] = 20;
        let yPos[0] = 10;
        let length  = 1;
        let dir     = 1;                // start moving right
        return this;
    }

    /** Sets a new direction (0–3) if it’s not opposite. */
    method void setDirection (int d) {
        // Prevent 180-degree turns
        if ((dir = 0) & (d = 2)) { return; }
        if ((dir = 2) & (d = 0)) { return; }
        if ((dir = 1) & (d = 3)) { return; }
        if ((dir = 3) & (d = 1)) { return; }
        let dir = d;
        return;
    }

    /** Moves the snake one step in the current direction. */
    method void move () {
        var int i;

        // shift body backwards
        let i = length;
        while (i > 0) {
            let xPos[i] = xPos[i - 1];
            let yPos[i] = yPos[i - 1];
            let i = i - 1;
        }

        // advance head
        if (dir = 0) { let yPos[0] = yPos[0] - 1; }
        if (dir = 1) { let xPos[0] = xPos[0] + 1; }
        if (dir = 2) { let yPos[0] = yPos[0] + 1; }
        if (dir = 3) { let xPos[0] = xPos[0] - 1; }

        return;
    }

    /** Grows the snake by one segment (called after eating). */
    method void grow () {
        let length = length + 1;
        return;
    }

    /** Accessors */
    method int getLength () { return length; }
    method int getX     (int idx) { return xPos[idx]; }
    method int getY     (int idx) { return yPos[idx]; }
    method int headX    () { return xPos[0]; }
    method int headY    () { return yPos[0]; }
}
